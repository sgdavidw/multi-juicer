# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
resources:
  repositories:
  - repository: kubernetes-ingress # The name used to reference this repository in the checkout step
    type: github
    endpoint: 'github connection 1'
    name: 'sgdavidw/kubernetes-ingress'


variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7b4f56f6-2202-4be1-95b1-880f0f1ecf94'
  imageRepository: 'sgdavidwmultijuicer'
  containerRegistry: 'napmultijuiceracr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'napmultijuiceracr5004-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    - task: Docker@1
      displayName: 'Build an image'
      inputs:
        azureSubscriptionEndpoint: 'nap-multi-juicer - Azure'
        azureContainerRegistry: napmultijuiceracr.azurecr.io
        imageName: 'napmultijuiceracr.azurecr.io/napmultijuicer:$(Build.BuildId)'

    - task: Docker@1
      displayName: 'Push an image'
      inputs:
        azureSubscriptionEndpoint: 'nap-multi-juicer - Azure'
        azureContainerRegistry: napmultijuiceracr.azurecr.io
        command: 'Push an image'
        imageName: 'napmultijuiceracr.azurecr.io/napmultijuicer:$(Build.BuildId)'

    - task: HelmInstaller@0
      displayName: 'Install Helm 3.*.*'
      inputs:
        helmVersion: 3.0.2
        checkLatestHelmVersion: false
        kubectlVersion: 1.10.3
        checkLatestKubectl: false
    - script: dir $(Build.SourcesDirectory)
    - script: dir $(Build.SourcesDirectory)/multi-juicer/helm/multi-juicer
    - task: HelmDeploy@0
      displayName: 'helm package'
      inputs:
        azureSubscription: 'nap-multi-juicer - Azure'
        azureResourceGroup: 'nap-multi-juicer-rg'
        kubernetesCluster: 'nap-multi-juicer'
        command: package
        chartPath: '$(Build.SourcesDirectory)/multi-juicer/helm/multi-juicer'
        save: false

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts: drop'

    - checkout: kubernetes-ingress
    - script: dir $(Build.SourcesDirectory)/kubernetes-ingress
    
    - task: DownloadSecureFile@1
      name: nginxrepokey
      displayName: 'Download nginx-repo.key'
      inputs:
        secureFile: 'nginx-repo.key'
    - task: DownloadSecureFile@1
      name: nginxrepocrt
      displayName: 'Download nginx-repo.crt'
      inputs:
        secureFile: 'nginx-repo.crt'
        
    - script: |
        echo $(Build.SourcesDirectory)
        ln -s -t $(Build.SourcesDirectory)/kubernetes-ingress/nginx-repo.key $(nginxrepokey.secureFilePath)
        ln -s -t $(Build.SourcesDirectory)/kubernetes-ingress/nginx-repo.crt $(nginxrepocrt.secureFilePath)
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'sgdavidwmultijuicer.dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

